
from data import maskdata
from Xcept import  xception 
import time
import torch
from torchvision import datasets, models, transforms
import os
import torch.nn as nn

import torch.optim as optim
import torchvision
from torch.optim import lr_scheduler
from torch.utils.data import DataLoader ,Dataset , random_split

import numpy as np
import joblib
from efficientnet_pytorch import EfficientNet
from PIL import Image
from ipywidgets import IntProgress



augmentation = torchvision.transforms.Compose([torchvision.transforms.Resize(224),
                                                    torchvision.transforms.RandomCrop(224),                                                                            
                                                    torchvision.transforms.RandomHorizontalFlip(),
                                                    torchvision.transforms.ToTensor(),
                                                    torchvision.transforms.Normalize(mean = [0.485, 0.456, 0.406],std = [0.229, 0.224, 0.225])
                                                    ])

def train_model( loader, model , criterion , optimizer  , num_epochs):
    
    model.train()
    for epoch in range(num_epochs):
       print('Epoch : {}/{}'.format(epoch, num_epochs - 1))
       print('-' * 10)
       accuracy = 0.0
       running_loss = 0.0
       for i ,data in enumerate(loader , 0):
           inputs , labels =data['image'] , data['label']
           
           inputs, labels = inputs.to(device , dtype=torch.float32), labels.to(device)
           optimizer.zero_grad()          
           outputs = model(inputs)
           
           loss = criterion(outputs, labels)
           
           loss.backward()
           optimizer.step()
           
           _, pred = torch.max(torch.sigmoid(outputs), 1)
           acc = torch.sum(pred==labels).item()
           accuracy += acc

           running_loss += loss.item()
   
       print("Train Loss: {}".format(running_loss / face.__len__()))
       print("Train Accuracy: {}".format(accuracy / face.__len__()))
       
       if epoch==5:
           torch.save(model.state_dict() , './EfficientNet/mask/3_5.pth')
       if epoch==10:
           torch.save(model.state_dict() , './EfficientNet/mask/3_10.pth')
           
    torch.save(model.state_dict() , './EfficientNet/mask/3_20.pth')  
    return model

def makelist(path):
    l =[]
    for i in os.listdir(path):
        pp = os.path.join(path , i , '1.jpg')
        if os.path.exists(pp):
            l.append(pp)
    return l
        
if __name__ =="__main__":

    
#----------------------xception----------------------------------------------    
# =============================================================================
#     model = xception(pretrained=False)
#     model.fc = model.last_linear
#     del model.last_linear
#     state_dict = torch.load(
#         r'C:\Users\jeremy\Desktop\2021DF\model\FaceForensics-master\FaceForensics-master\classification\xception-b5690688.pth')
#     for name, weights in state_dict.items():
#         if 'pointwise' in name:
#             state_dict[name] = weights.unsqueeze(-1).unsqueeze(-1)
#     model.load_state_dict(state_dict)
#     model.last_linear = model.fc
# 
# 
#     out_num = model.fc.in_features
#     model.last_linear = nn.Linear(out_num,2)
#     
#     for param in model.parameters():
#         param.requires_grad = True
# =============================================================================
    
    
#-------------------------efficient--------------------------------------------------    
    model = EfficientNet.from_pretrained('efficientnet-b3' , num_classes=2)
    
    
    
    criterion = nn.CrossEntropyLoss()
    
    optimizer_ft = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
    
    
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    model = model.to(device)
    
    
      
# load dataset ===========================================================================
    
    path = r'D:\Celeb-DF-v2\train\real_mask'
    real1 = makelist(path)
    path = r'D:\Celeb-DF-v2\train\yt-real_mask'
    real2 = makelist(path)
    real = real1 + real2
    path = r'D:\Celeb-DF-v2\train\fake_mask'
    fake = makelist(path)
    
    face = maskdata(real , fake ,transforms = augmentation)
    
    
    train_loader = DataLoader( face , batch_size = 8 , shuffle = True , num_workers = 0 )
    
# =============================================================================
#     face = deepfakedata(0, 'D:/Celeb-DF-v2/train/real' , 'D:/Celeb-DF-v2/train/fake',transforms = augmentation ) 
#     
#     for i in range(1,10):
#         face += deepfakedata(i, 'D:/Celeb-DF-v2/train/real' , 'D:/Celeb-DF-v2/train/fake',transforms = augmentation )
#     
#     train_loader = DataLoader( face , batch_size = 8 , shuffle = True , num_workers = 0 )
# =============================================================================
        
# =======================================================================================
        
    
    model = train_model(train_loader, model, criterion, optimizer_ft, num_epochs=20 )    
    
    
    
    
    
    
    
